/*
 * This file is generated by jOOQ.
 */
package com.github.anishitani.dsrouting.generated.tables;


import com.github.anishitani.dsrouting.generated.Blog;
import com.github.anishitani.dsrouting.generated.Keys;
import com.github.anishitani.dsrouting.generated.tables.records.PostRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Post extends TableImpl<PostRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>blog.post</code>
     */
    public static final Post POST = new Post();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostRecord> getRecordType() {
        return PostRecord.class;
    }

    /**
     * The column <code>blog.post.id</code>.
     */
    public final TableField<PostRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>blog.post.author</code>.
     */
    public final TableField<PostRecord, String> AUTHOR = createField(DSL.name("author"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>blog.post.title</code>.
     */
    public final TableField<PostRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>blog.post.summary</code>.
     */
    public final TableField<PostRecord, String> SUMMARY = createField(DSL.name("summary"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>blog.post.content</code>.
     */
    public final TableField<PostRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>blog.post.tags</code>.
     */
    public final TableField<PostRecord, String[]> TAGS = createField(DSL.name("tags"), SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * The column <code>blog.post.created_at</code>.
     */
    public final TableField<PostRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>blog.post.modified_at</code>.
     */
    public final TableField<PostRecord, LocalDateTime> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private Post(Name alias, Table<PostRecord> aliased) {
        this(alias, aliased, null);
    }

    private Post(Name alias, Table<PostRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>blog.post</code> table reference
     */
    public Post(String alias) {
        this(DSL.name(alias), POST);
    }

    /**
     * Create an aliased <code>blog.post</code> table reference
     */
    public Post(Name alias) {
        this(alias, POST);
    }

    /**
     * Create a <code>blog.post</code> table reference
     */
    public Post() {
        this(DSL.name("post"), null);
    }

    public <O extends Record> Post(Table<O> child, ForeignKey<O, PostRecord> key) {
        super(child, key, POST);
    }

    @Override
    public Schema getSchema() {
        return Blog.BLOG;
    }

    @Override
    public Identity<PostRecord, Integer> getIdentity() {
        return (Identity<PostRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PostRecord> getPrimaryKey() {
        return Keys.POST_PKEY;
    }

    @Override
    public List<UniqueKey<PostRecord>> getKeys() {
        return Arrays.<UniqueKey<PostRecord>>asList(Keys.POST_PKEY);
    }

    @Override
    public Post as(String alias) {
        return new Post(DSL.name(alias), this);
    }

    @Override
    public Post as(Name alias) {
        return new Post(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Post rename(String name) {
        return new Post(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Post rename(Name name) {
        return new Post(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, String[], LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
